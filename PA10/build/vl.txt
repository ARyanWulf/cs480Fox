#version 330

          layout (location = 0) in vec3 v_position;
          layout (location = 1) in vec2 TexCoord;
          layout (location = 2) in vec3 vNormal;

          smooth out vec2 TexCoord0;
          out vec4 lightColor;

          uniform mat4 projectionMatrix;
          uniform mat4 viewMatrix;
          uniform mat4 modelMatrix;
          uniform vec4 LightPosition;
          uniform float ShininessAmbient;
          uniform float ShininessSpec;
          uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;
          uniform vec4 SpotlightPosition;


          void main(void)
          {
            vec4 v = vec4(v_position, 1.0);
            vec3 pos = (modelMatrix * viewMatrix * v).xyz;
            vec3 L = normalize(LightPosition.xyz - pos);
            vec3 E = normalize(-pos);
            vec3 H = normalize(L+E);

            vec3 LS = normalize(SpotlightPosition.xyz - pos);

            vec3 N = normalize(modelMatrix * viewMatrix * vec4(vNormal, 0.0)).xyz;

            vec4 ambient = vec4(ShininessAmbient, ShininessAmbient, ShininessAmbient, 1.0);

            float Kd = max(dot(L,N), 0.0);

            vec4 diffuse = Kd * DiffuseProduct;
            float Ks = pow(max(dot(N,H), 0.0), ShininessSpec);

            vec4 specular = Ks * (SpecularProduct * cos(Kd));
            if(dot(L,N) < 0.0) specular = vec4(0.0, 0.0, 0.0, 1.0);

            gl_Position = (projectionMatrix * viewMatrix * modelMatrix) * v;
            TexCoord0 = TexCoord;



            vec3 HS = normalize(LS+E);
            float KsS = pow(max(dot(N,HS), 0.0), ShininessSpec);

            float KdS = max(dot(LS,N), 0.0);

            vec4 diffuseS = KdS * DiffuseProduct;

            vec4 specularS = KsS * SpecularProduct * cos(KdS);

            if(dot(LS,N) < 0.0) specularS = vec4(0.0, 0.0, 0.0, 1.0);

	    
            lightColor = ambient + (diffuseS*diffuse )+(specularS*specular);
            lightColor.a = 1.0;
          }






