#version 330
  smooth in vec2 TexCoord0;

  out vec4 gl_FragColor;
  uniform sampler2D sampler;

  in vec3 fN;
  in vec3 fL;
  in vec3 fE;

  uniform float ShininessAmbient;
  uniform float ShininessSpecular;
  uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;

  void main()
  {
    //Normalize the input lighting vectors

    vec3 N = normalize(fN);
    vec3 E = normalize(fE);
    vec3 L = normalize(fL);
    vec3 H = normalize(L+E);

    AmbientProduct = vec4(ShininessAmbient, ShininessAmbient, ShininessAmbient, 1.0);
    vec4 ambient = AmbientProduct;

    float Kd = max(dot(L,N), 0.0);
    vec4 diffuse = Kd*DiffuseProduct;

    float Ks = pow(max(dot(N,H),0.0), ShininessSpecular);
 
    vec4 specular = Ks*(SpecularProduct* cos(Kd));

    //discard the specular highlight if the light's behind the Vertex
    if(dot(L,N)<0.0) specular = vec4(0.0,0.0,0.0,1.0);

    vec4 lightColor = ambient + diffuse + specular;
    lightColor.a = 1.0;
    gl_FragColor = lightColor*texture2D(sampler, TexCoord0.st);

  }
